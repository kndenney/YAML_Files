#Since we are using Windows as our agent pool, we need to use Powershell to run our NPM restorations whereas with Linux we could just
#call NPM install etc. we cannot do that with Windows


trigger:
- master

pool:
  vmImage: windows-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '14.x' #Whatever major Node version you want to use
  displayName: 'Install Node.js'

#The scripts to run must be in this order because we first install Node, then we install Angular,
#then by running npm install we install all the Angular dependent packages in the project
#then we build with the various build flags
- script: |
    npm install -g @angular/cli
    npm install    
    ng build --prod #--optimization=false
  displayName: 'npm install and build'
#Our working directory is Build.SourcesDirectory because that is like D:/a/i or whatever
#so we put that as the base, then we go to the .Net Core Project that contains the Angular Client Application
#and list that, then the ClientApp folder with a forward slash
- task: PowerShell@2 
  inputs: 
    targetType: 'inline' 
    workingDirectory: $(Build.SourcesDirectory)/[.Net Project ( NOT SOLUTION NAME ) that contains ClientApp folder goes here (full name)]/ClientApp/
    script: | 
      npm install -g @angular/cli 
      npm install 
      ng build --prod --configuration 'prod' #Or we can use a Variable in DevOps and do $(VariableName)

    # Copy files from a source folder to a target folder using patterns matching file paths (not folder paths)
- task: CopyFiles@2
  inputs:
    sourceFolder: $(Build.SourcesDirectory)/[.Net Project Name Containing ClientApp folder]/ClientApp/
    contents: '**/dist' # Pull the dist directory (Angular)
    targetFolder: $(Build.ArtifactStagingDirectory)/dist

- task: Bash@3
  inputs:
    targetType: inline
    workingDirectory: $(Build.SourcesDirectory) 
    script: ls -R

#install .net sdk 
- task: UseDotNet@2
  displayName: Install .NET 5 SDK
  inputs:
    version: '3.1.x'
    packageType: 'sdk'
    

#restore nuget packages from build
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: 'vstsfeed goes here' #To get the feed GUID use the helper tasks in DevOps YAML builder on the right side and add this task and that will give the feed ID

#perform build action
- task: DotNetCoreCLI@2
  displayName: Build .Net
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'

#perform publish
- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: True
    
#perform publish of artifact
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed() 

